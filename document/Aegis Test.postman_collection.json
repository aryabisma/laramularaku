{
	"info": {
		"_postman_id": "a97da00c-cf22-4c78-8ea5-b72182ef1c13",
		"name": "Aegis Test",
		"description": "# ðŸš€ About this collection\n\nHi, I am Arya Bisma. This collection is part of testing method for my assignment at Aegis.\n\n## ðŸ”– **How to use this template**\n\nunless you have different URI to run your laravel app, you can just execute preset available in this collection. Otherwise, please adjust the URI.\n\n**\\[POST\\] Create User**\n\nit will call endpoint at /api/users with provided parameter. Change the value as you need. name, email, and password is mandatory and has its own validations. try it!\n\n**\\[GET\\] Get User**\n\nit will call endpoint at /api/users to retrieve paginated user lists. change parameter values as necessary. it can run without any parameters using default value.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40361930"
	},
	"item": [
		{
			"name": "Get User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "file",
					"file": {}
				},
				"url": {
					"raw": "http://localhost:8000/api/users?page=1&sortBy=name&search=a",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "sortBy",
							"value": "name"
						},
						{
							"key": "search",
							"value": "a"
						}
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Create User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"email\": \"bisma.perint@gmail.com\",\n    \"name\" : \"bisma perint\",\n    \"password\" : \"password\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8000/api/users",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"api",
						"users"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}